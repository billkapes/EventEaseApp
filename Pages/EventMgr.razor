@page "/eventmgr"
@using EventEaseApp.Models
@using EventEaseApp.Services

@inject EventService EventService

<h2>Event Manager</h2>

<EditForm Model="newEvent" OnValidSubmit="AddEvent">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="newEvent.Name" />
        <ValidationMessage For="@(() => newEvent.Name)" />
    </div>
    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="newEvent.Description" />
        <ValidationMessage For="@(() => newEvent.Description)" />
    </div>
    <div class="form-group">
        <label>Date:</label>
        <InputDate class="form-control" @bind-Value="newEvent.Date" />
        <ValidationMessage For="@(() => newEvent.Date)" />
    </div>
    <div class="form-group">
        <label>Location:</label>
        <InputText class="form-control" @bind-Value="newEvent.Location" />
        <ValidationMessage For="@(() => newEvent.Location)" />
    </div>
    <button type="submit" class="btn btn-primary">Add Event</button>
</EditForm>

<hr />

@if (events.Count == 0)
{
    <p>No events yet.</p>
}
else
{
    @foreach (var evt in events)
    {
        <EventCard Event="evt" OnDelete="() => DeleteEvent(evt)" />
    }
}

@code {
    private List<Event> events = new();
    private Event newEvent = new();

    protected override void OnInitialized()
    {
        events = EventService.GetEvents().ToList();
    }

    private void AddEvent()
    {
        EventService.AddEvent(newEvent);
        newEvent = new Event();
        events = EventService.GetEvents().ToList();
        StateHasChanged();
    }

    private void DeleteEvent(Event evt)
    {
        EventService.DeleteEvent(evt);
        events = EventService.GetEvents().ToList();
        StateHasChanged();
    }
}
